@model Proyecto_FinalProgra1.Models.Order
@{
    ViewData["Title"] = "Checkout";
}

<h2 class="text-primary">Finalizar Pedido</h2>

<form asp-action="Checkout" method="post" onsubmit="return validatePayment();">
    @Html.AntiForgeryToken() <!-- üîê Evita CSRF -->

    <div class="mb-3">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Email" class="form-label"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="MobileNumber" class="form-label"></label>
        <input asp-for="MobileNumber" class="form-control" />
        <span asp-validation-for="MobileNumber" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Address" class="form-label"></label>
        <textarea asp-for="Address" class="form-control"></textarea>
        <span asp-validation-for="Address" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="PaymentMethod" class="form-label"></label>
        <select asp-for="PaymentMethod" class="form-select">
            <option value="">-- Selecciona m√©todo de pago --</option>
            <option value="Efectivo">Efectivo</option>
            <option value="Tarjeta">Tarjeta</option>
            <option value="Yape/Plin">Yape/Plin</option>
        </select>
        <span asp-validation-for="PaymentMethod" class="text-danger"></span>

        <div id="totalContainer" style="display: none; margin-top: 10px;">
            <strong>Total:</strong> <span id="cartTotal" class="text-primary">$0.00</span>
        </div>

        <div id="paypal-button-container" style="display:none; margin-top: 20px;"></div>
        <input type="hidden" id="paypalApproved" name="paypalApproved" value="false" />
    </div>

    <button type="submit" class="btn btn-success">Confirmar Pedido</button>
    <a asp-controller="ShoppingCart" asp-action="Index" class="btn btn-secondary">Volver al carrito</a>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="https://www.paypal.com/sdk/js?client-id=AYKLWCKSZBaLnC2MImUkVLno0NUptlPumBkFBT8TSPKy-pKiSEEhdCSk4OlDCfimIZg8TYGGH3IPIPU4&currency=USD"></script>

    <script>
        const paymentSelect = document.querySelector('[name="PaymentMethod"]');
        const paypalContainer = document.getElementById('paypal-button-container');
        const paypalApproved = document.getElementById('paypalApproved');
        const form = document.querySelector('form');
        const totalContainer = document.getElementById('totalContainer');
        const cartTotal = document.getElementById('cartTotal');

        function togglePayPalButton() {
            const isCard = paymentSelect.value === 'Tarjeta';
            paypalContainer.style.display = isCard ? 'block' : 'none';
            totalContainer.style.display = isCard ? 'block' : 'none';
            paypalApproved.value = 'false';
            if (isCard) fetchTotal();
        }

        function fetchTotal() {
            fetch('/ShoppingCart/GetCartTotal', {
                credentials: 'include'
            })
            .then(res => res.json())
            .then(data => {
                cartTotal.innerText = `$${data.total.toFixed(2)}`;
            })
            .catch(err => console.error("Error obteniendo total:", err));
        }

        function validatePayment() {
            if (paymentSelect.value === 'Tarjeta' && paypalApproved.value !== "true") {
                alert("Debes completar el pago con PayPal antes de confirmar.");
                return false;
            }
            return true;
        }

        paymentSelect.addEventListener('change', togglePayPalButton);
        togglePayPalButton();

        paypal.Buttons({
            createOrder: function () {
                return fetch('/Order/CreatePaypalOrder', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(res => res.json())
                .then(data => data.id);
            },
            onApprove: function (data) {
                return fetch(`/Order/CapturePaypalOrder?orderID=${data.orderID}`, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(res => {
                    if (!res.ok) throw new Error('Error al capturar la orden');
                    paypalApproved.value = "true";
                    setTimeout(() => form.submit(), 400);
                });
            },
            onError: function (err) {
                console.error('PayPal error:', err);
                alert('Hubo un error al procesar el pago con PayPal.');
            }
        }).render('#paypal-button-container');
    </script>
}
